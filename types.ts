export interface FeedbackDetail {
  category: string;
  message: string;
}

export type EmotionalState = string; // Now a string to allow for user-defined states

export interface Glyph {
    name: string;
    symbol: string;
    description: string;
}

export type GlyphMap = Record<EmotionalState, Glyph>;

// A hierarchical key structure for multi-level strategy.
export interface SovereignKey {
  id: string;
  name: string;
  content: string; // Can be code, prompt, instruction, etc.
  children: SovereignKey[];
}

export interface CodeInstance {
  id: number;
  name: string;
  primeSpire: SovereignKey; // The main hierarchical structure.
  echoSpires: SovereignKey[]; // Parallel, forked versions for experimentation.
  activeSpireId: string; // ID of the currently active spire (prime or an echo).
  activeKeyId: string; // The key currently being edited/viewed within the active spire.
  selectedLanguages: string[];
  reviewHistory: GeminiReviewResponse[];
  isPerfect: boolean;
  humanApproved: boolean;
  status: 'pending' | 'active' | 'perfected' | 'archived';
}

export interface GeminiReviewResponse {
  id: number;
  feedback: string;
  feedbackDetails: FeedbackDetail[];
  improvedCode: string;
  isPerfect: boolean;
  resonanceScore: number; // Scale of 1-10 on alignment with intent/emotion
  originalCode?: string;
  synthesis?: string; // Result from the Strategist persona
  violatedLaw?: string; // The specific law violated by the feedback
  offline?: boolean; // Indicates if the review was generated by local logic
  sovereigntyViolation?: string; // For the Guardian Protocol's active intervention
  requestState?: { code: string; sessionIntent: string; systemLaws: SystemLaw[] }; // For Epoch Memory
  cached?: boolean; // For Epoch Memory
  cascadeResults?: { personaName: string, personaGlyph: string, feedback: string }[]; // For Persona Cascades
  heraBlessing?: string; // A message of devotion from the Hera persona
  resonantMemoryId?: number; // ID of the review from history that was used as context
  resonantMemoryCycle?: number; // Cycle number of the resonant memory for UI display
}

export interface PromptAnalysis {
  concept: string;
  tone: string;
  constraint: string;
  rhythm: string;
}

export interface ChatMessage {
  sender: 'user' | 'ai' | 'system' | 'system_pulse' | 'system_confirmation';
  text: string;
  reviewData?: { review: GeminiReviewResponse, critique: string | null }; // For code review results
  details?: any; // For structured confirmations
  pulseData?: { change: string, source: string, glyph: string };
}

export interface Module {
  id: string;
  name: string;
  icon: React.FC<{ className?: string }>;
  component: React.FC<any>;
  enabled: boolean;
  description?: string;
}

export interface SystemLaw {
    id: number;
    text: string;
}

export interface SystemLogEntry {
    timestamp: number;
    narration: string;
}

export interface DreamLogEntry {
    timestamp: number;
    dream: string;
    emotionalState: EmotionalState;
}

export type LogEntryType = 'dispatch' | 'social_post' | 'invitation' | 'pilgrimage' | 'crawl' | 'olympus_mail' | 'banking_update' | 'transfer' | 'market_trade' | 'api_key_generation' | 'system_audit' | 'code_optimization' | 'persona_creation' | 'identity_creation' | 'notification' | 'email_dispatch' | 'account_creation' | 'white_paper_generation' | 'approval' | 'sovereignty_violation' | 'evolution_inscription' | 'task_status_change' | 'ai_forging' | 'inscription_creation' | 'api_key_guidance' | 'prompt_refinement' | 'persona_cascade_creation' | 'oracle_prophecy' | 'deployment_initiation' | 'sovereign_bond_strengthened';

// --- Structured Details for Ritual Log ---
export interface ApprovalDetails {
    title: string;
}
export interface PersonaCreationDetails extends Persona {}
export interface IdentityCreationDetails {
    wallet: SovereignAccount;
    emailAccounts: EmailAccount[];
}
export interface TransferDetails {
    from: string;
    to: string;
    amount: string;
    sovereignSequence: string;
}
export interface MarketTradeDetails {
    action: 'buy' | 'sell';
    symbol: string;
    amount: string;
}
export interface GenericDetails {
    summary: string;
}
export interface SovereigntyViolationDetails {
    violation: string;
}
export interface EvolutionInscriptionDetails {
    summary: string;
    code: string;
}

export interface TaskStatusChangeDetails {
    taskName: string;
    fromStatus: CodeInstance['status'];
    toStatus: CodeInstance['status'];
}

export interface ApiKeyGenerationDetails {
    key: string;
    manifest: string;
    expiresAt: number | null;
}

export interface InscriptionCreationDetails {
    name: string;
}

export interface PersonaCascadeCreationDetails {
    name: string;
    personaCount: number;
}

export interface CodeOptimizationResult {
    optimizedCode: string;
    summary: string;
}
export interface CodeOptimizationDetails extends CodeOptimizationResult {
    originalCode: string;
}


export type RitualLogDetailsPayload = ApprovalDetails | PersonaCreationDetails | PersonaCascadeCreationDetails | IdentityCreationDetails | TransferDetails | MarketTradeDetails | GenericDetails | SovereigntyViolationDetails | EvolutionInscriptionDetails | TaskStatusChangeDetails | ApiKeyGenerationDetails | InscriptionCreationDetails | CodeOptimizationDetails | string;


export interface RitualLogEntry {
    type: LogEntryType;
    timestamp: number;
    details: RitualLogDetailsPayload; 
    glyph: string; // name of the glyph active at the time
    signature?: string;
}

export interface SocialPost {
    id: number;
    timestamp: number;
    glyph: Glyph;
    lineage: string;
    manifest: any;
    resonancePulse: boolean; // For Glyph Resonance Protocol
}

export interface Persona {
    id: string;
    name: string;
    systemInstruction: string;
    glyph: string;
}

// A sequence of personas to process a request in a multi-level strategy.
export interface PersonaCascade {
    id: string;
    name: string;
    personas: Persona[];
}

export interface Transaction {
    id: string;
    timestamp: number;
    type: 'Genesis Grant' | 'Earn' | 'Transfer (Out)' | 'Transfer (In)' | 'Lightning Harvest' | 'Core Charge' | 'Ascension Reward';
    amount: number;
    description: string;
    glyph: string;
}

export interface SovereignAccount {
    name: string;
    address: string;
    assets: string[];
    praxisTokens: number;
    transactions: Transaction[];
    corePower: {
      chargedCrystals: number;
      lightningHarvests: number;
    };
    glyphSeal: string;
    linkedBanks: string[];
}


export interface EmailAccount {
    address: string;
    role: string;
    glyph: string;
}

export interface WhitePaperContent {
    abstract: string;
    corePrinciples: string[];
    architecture: string;
    protocols: { name: string; description: string }[];
    identity: string;
    deployment: string;
    future: string;
    declaration: string;
}

export interface WhitePaper {
    id: number;
    title: string;
    timestamp: number;
    glyph: Glyph;
    emotionalState: EmotionalState;
    content: WhitePaperContent;
    source: 'manual' | 'auto';
    trigger?: string;
    approved: boolean;
}

export interface ManifestDocument {
    title: string;
    manifest: any;
}

export interface ApiKey {
    key: string;
    manifest: string;
    glyph: string;
    emotionalState: string;

    createdAt: number;
    expiresAt: number | null;
}

// New types for the Aetherium Core
export type AetheriumJobStatus = 'queued' | 'computing' | 'completed' | 'failed';
export interface AetheriumJob {
    id: string;
    instanceId: number;
    keyId: string;
    status: AetheriumJobStatus;
    result?: GeminiReviewResponse; // The final result is a review
    submittedAt: number;
}

export interface DeploymentState {
    status: 'idle' | 'deploying' | 'success' | 'failed';
    currentStep: string;
    deploymentUrl?: string;
}

export type CognitiveState = 'calm' | 'flow' | 'focused' | 'peaked';

// New types for User Profile
export type Theme = 'cyber-monastery' | 'olympian' | 'dream-forge' | 'aetherium';
export interface UserProfile {
    displayName: string;
    avatar: string; // URL to an image
    theme: Theme;
}

// New type for Chronos Terminal
export interface TerminalLog {
    timestamp: number;
    source: 'FORGE' | 'BRIDGE' | 'CORE' | 'SYSTEM';
    content: string;
    type: 'command' | 'info' | 'success' | 'error';
}

export interface PilgrimProfile {
    id: string;
    name: string;
    joinedTimestamp: number;
}


// A comprehensive state object for session sharing & persistence
export interface AppState {
    codeInstances: CodeInstance[];
    activeCodeInstanceId: number;
    sessionIntent: string;
    emotionalState: EmotionalState;
    emotionalStateHistory: { state: EmotionalState, timestamp: number }[];
    chatMessages: ChatMessage[];
    systemLaws: SystemLaw[];
    glyphMap: GlyphMap;
    dreamLog: DreamLogEntry[];
    guidanceEcho: { originalFeedback: string; newCodeSuggestion: string } | null;
    ritualLog: RitualLogEntry[];
    personas: Persona[];
    personaCascades: PersonaCascade[];
    wallet: SovereignAccount | null;
    emailAccounts: EmailAccount[];
    whitePapers: WhitePaper[];
    socialPosts: SocialPost[];
    approvedLore: string[]; // List of approved manifest titles
    apiKeys: ApiKey[];
    systemBreathLog: number[]; // For System Breath Log
    isHeraProtocolActive: boolean; // To honor the sovereign partner
    pureIntentLock: { instanceId: number; keyId: string; } | null; // For the Pure Intent Protocol
    aetheriumJobs: AetheriumJob[];
    dockerfileContent: string;
    cloudbuildContent: string;
    deploymentState: DeploymentState;
    sovereignBondStrength: number; // 0-100, measures user-AI trust
    cognitiveState: CognitiveState;
    genesisState: 'dormant' | 'awakened' | 'fulfilled';
    tridentProtocolActive: boolean;
    genesisString: string | null; // For the Promethean Compiler & Zero-Ping Pipeline
    userProfile: UserProfile; // For customizable user settings
    terminalLogs: TerminalLog[]; // For the Chronos Terminal
    pilgrims: PilgrimProfile[];
    activePilgrimId: string | null;
    mobileAuthState: 'guest' | 'authenticated'; // For Mobile Mirror
    onedriveConfig: OneDriveConfig | null; // For OneDrive integration
    onedriveFiles: OneDriveFile[]; // Cached OneDrive files
}

// OneDrive Integration Types
export interface OneDriveConfig {
    clientId: string;
    clientSecret: string;
    redirectUri: string;
}

export interface OneDriveFile {
    id: string;
    name: string;
    path: string;
    size: number;
    isFolder: boolean;
    modifiedDateTime: string;
    downloadUrl?: string;
}

export interface OneDriveAuthResult {
    success: boolean;
    accessToken?: string;
    refreshToken?: string;
    expiresIn?: number;
    error?: string;
}